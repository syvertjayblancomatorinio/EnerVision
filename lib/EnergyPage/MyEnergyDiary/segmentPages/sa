import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:supabase_project/Buttons/buttons_widget.dart';
import 'package:supabase_project/CommonWidgets/appliance-today-widgets.dart';
import 'package:supabase_project/EnergyPage/MyEnergyDiary/appliance-widgets/appliance-tile-widget.dart';
import 'package:supabase_project/EnergyPage/MyEnergyDiary/appliance-widgets/calculator.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

class AppliancesContainer extends StatefulWidget {
  const AppliancesContainer({super.key});

  @override
  _AppliancesContainerState createState() => _AppliancesContainerState();
}

class _AppliancesContainerState extends State<AppliancesContainer> {
  late EnergyCalculator energyCalculator;

  final TextEditingController addApplianceNameController =
      TextEditingController();
  final TextEditingController addWattageController = TextEditingController();
  final TextEditingController addUsagePatternController =
      TextEditingController();

  final GlobalKey<FormState> formKey = GlobalKey<FormState>();

  bool isLoading = false;

  @override
  void initState() {
    super.initState();
    _addUsagePatternListener(addUsagePatternController);
  }

  @override
  void dispose() {
    addApplianceNameController.dispose();
    addWattageController.dispose();
    addUsagePatternController.dispose();
    super.dispose();
  }

  void _addUsagePatternListener(TextEditingController controller) {
    controller.addListener(() {
      final text = controller.text;
      final value = double.tryParse(text);
      if (value != null && value > 24) {
        controller.value = TextEditingValue(
          text: '24',
          selection: TextSelection.fromPosition(
            const TextPosition(offset: 2),
          ),
        );
      }
    });
  }

  Future<List<Map<String, dynamic>>> _fetchAppliancesFromDB() async {
    setState(() {
      isLoading = true;
    });

    final prefs = await SharedPreferences.getInstance();
    final userId = prefs.getString('userId');

    final url = Uri.parse("http://10.0.2.2:8080/user/$userId/appliances");
    var response = await http.get(url);

    if (response.statusCode == 200) {
      final List<dynamic> appliances = jsonDecode(response.body);

      return appliances
          .map((appliance) => {
                'applianceName': appliance['applianceName'] ??
                    'Unknown', // Provide default value
                'wattage': (appliance['wattage'] as num?)?.toDouble() ??
                    0.0, // Handle null and convert to double
                'usagePattern':
                    (appliance['usagePattern'] as num?)?.toDouble() ??
                        0.0, // Handle null and convert to double
              })
          .toList();
    } else {
      // Handle error
      return [];
    }
  }

  Future<void> addApplianceToDB() async {
    final url = Uri.parse("http://10.0.2.2:8080/addApplianceToUser");
    var response = await http.post(
      url,
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, dynamic>{
        // Change to dynamic for flexibility
        'applianceName': addApplianceNameController.text.isNotEmpty
            ? addApplianceNameController.text
            : 'Unnamed Appliance', // Provide default value
        'wattage': double.tryParse(addWattageController.text) ??
            0.0, // Handle null and parse
        'usagePattern': double.tryParse(addUsagePatternController.text) ??
            0.0, // Handle null and parse
      }),
    );
    if (response.statusCode == 200) {
      setState(() {
        Navigator.of(context).pop();
      });
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Failed to add appliance')),
      );
    }
  }

  void showAddApplianceDialog() {
    addApplianceNameController.clear();
    addWattageController.clear();
    addUsagePatternController.clear();

    _showApplianceDialog(
      context,
      title: 'Add Appliance',
      imagePath: 'assets/dialogImage.png',
      onSave: () async {
        if (formKey.currentState?.validate() ?? false) {
          await addApplianceToDB();

          if (mounted) {
            Navigator.of(context).pop();
          }
        }
      },
    );
  }

  void _showApplianceDialog(
    BuildContext context, {
    required String title,
    required String imagePath,
    required VoidCallback onSave,
  }) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          contentPadding: const EdgeInsets.symmetric(horizontal: 20),
          content: SingleChildScrollView(
            child: SizedBox(
              width: 800,
              child: Form(
                key: formKey,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Image.asset(imagePath, height: 100, width: 100),
                    const SizedBox(height: 20),
                    Text(title, style: Theme.of(context).textTheme.titleMedium),
                    const SizedBox(height: 20),
                    _buildTextField(
                        addApplianceNameController, 'Enter Appliance Name'),
                    const SizedBox(height: 10),
                    _buildTextField(addWattageController, 'Wattage',
                        keyboardType: TextInputType.number),
                    const SizedBox(height: 10),
                    _buildTextField(addUsagePatternController,
                        'Usage Pattern (hours per day)',
                        keyboardType: TextInputType.number),
                    const SizedBox(height: 20),
                  ],
                ),
              ),
            ),
          ),
          actions: [
            textButton('Cancel', () => Navigator.of(context).pop()),
            addButton('Save', onSave),
          ],
        );
      },
    );
  }

  Widget _buildTextField(TextEditingController controller, String labelText,
      {TextInputType keyboardType = TextInputType.text}) {
    return TextFormField(
      controller: controller,
      keyboardType: keyboardType,
      decoration: InputDecoration(
        labelText: labelText,
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(15)),
      ),
      validator: (value) {
        if (value == null || value.isEmpty) return 'Please enter a value';
        if (keyboardType == TextInputType.number &&
            double.tryParse(value) == null)
          return 'Please enter a valid number';
        return null;
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        children: [
          FutureBuilder<List<Map<String, dynamic>>>(
            future: _fetchAppliancesFromDB(),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return const Center(child: CircularProgressIndicator());
              } else if (snapshot.hasError) {
                return const Center(child: Text('Failed to load appliances'));
              } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                return const Center(
                  child: Padding(
                    padding: EdgeInsets.all(20.0),
                    child: Text(
                      'No appliances yet',
                      style: TextStyle(fontSize: 16, color: Colors.grey),
                    ),
                  ),
                );
              } else {
                final appliances = snapshot.data!;

                // Calculate energy consumption and cost
                energyCalculator = EnergyCalculator(appliances);
                final dailyConsumption = energyCalculator
                    .calculateDailyEnergyConsumption(appliances);
                final dailyCost =
                    energyCalculator.calculateDailyCost(appliances);

                return Column(
                  children: [
                    Row(
                      children: [
                        CostKilowatt(dailyCost, 'cost'),
                        CostKilowatt(dailyConsumption, 'kw'),
                      ],
                    ),
                    Container(
                      color: const Color(0xFFEFEFEF),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Padding(
                            padding: EdgeInsets.only(left: 10.0),
                            child: Text(
                              'APPLIANCE',
                              style: TextStyle(
                                  fontSize: 18, fontWeight: FontWeight.bold),
                            ),
                          ),
                          const SizedBox(height: 10),
                          Column(
                            children: appliances.map((appliance) {
                              return ApplianceTileWidget(
                                applianceName: '',
                                usagePattern: 2,
                                wattage: 2,
                              );
                            }).toList(),
                          ),
                          const SizedBox(height: 20),
                          Center(
                            child: AddApplianceButton(
                              text: 'Add Appliance',
                              onPressed: showAddApplianceDialog,
                            ),
                          ),
                          const SizedBox(height: 20),
                        ],
                      ),
                    ),
                  ],
                );
              }
            },
          ),
        ],
      ),
    );
  }
}
