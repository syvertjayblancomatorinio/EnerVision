add appliance
router.post('/addApplianceToUser', asyncHandler(async (req, res) => {
    const { userId, applianceData } = req.body;
    const { applianceName, applianceCategory, wattage, usagePatternPerDay, usagePatternPerWeek } = applianceData;

    // Validate applianceName
    if (!applianceName || applianceName.trim() === "") {
        return res.status(400).json({ message: 'Appliance name cannot be empty or just whitespace.' });
    }

    // Check if appliance already exists for this user
    const existingAppliance = await Appliance.findOne({ applianceName: applianceName.trim(), userId });
    if (existingAppliance) {
        return res.status(400).json({ message: 'Appliance already exists for this user.' });
    }

    // Find the user to get the kWh rate
    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ message: 'User not found' });

    // Automatically set the createdAt date to the current time
    const createdDate = new Date();
    const kwhRate = user.kwhRate; // Assume the user has a kWh rate

    // Calculate remaining days in the month
    const currentYear = createdDate.getFullYear();
    const currentMonth = createdDate.getMonth(); // 0-indexed, so January is 0
    const totalDaysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
    const startDay = createdDate.getDate();
    const remainingDays = totalDaysInMonth - startDay + 1;

    // Calculate total days used from created date to the end of the month
    const fullWeeks = Math.floor((remainingDays + startDay - 1) / 7);
    const extraDays = (remainingDays + startDay - 1) % 7;

    // Total Days Used
    const initialTotalDaysUsed = (fullWeeks * usagePatternPerWeek) + Math.min(extraDays, usagePatternPerWeek);

    // Calculate total hours for the initial period
    const initialTotalHours = initialTotalDaysUsed * usagePatternPerDay;

    // Calculate Energy Consumption (kWh) and Total Cost
    const initialEnergyKwh = (wattage * initialTotalHours) / 1000; // Convert wattage to kWh
    const initialMonthlyCost = initialEnergyKwh * kwhRate; // Total cost based on energy consumed

    // Create new appliance
    const newAppliance = new Appliance({
        applianceName: applianceName.trim(),
        applianceCategory,
        wattage,
        usagePatternPerDay,
        usagePatternPerWeek,
        createdAt: createdDate,
        monthlyCost: initialMonthlyCost,
        userId
    });

    await newAppliance.save();
    user.appliances.push(newAppliance._id); // Assuming you have an appliances array in the user model
    await user.save({ validateBeforeSave: false });

    res.status(201).json({ message: 'Appliance added to user', appliance: newAppliance });
}));


router.post('/addApplianceToUser', asyncHandler(async (req, res) => {
    const { userId, applianceData } = req.body;
    const { applianceName, applianceCategory, wattage, usagePatternPerDay, usagePatternPerWeek, createdAt } = applianceData;

    // Validate applianceName
    if (!applianceName || applianceName.trim() === "") {
        return res.status(400).json({ message: 'Appliance name cannot be empty or just whitespace.' });
    }

    // Check if appliance already exists for this user
    const existingAppliance = await Appliance.findOne({ applianceName: applianceName.trim(), userId });
    if (existingAppliance) {
        return res.status(400).json({ message: 'Appliance already exists for this user.' });
    }

    // Find the user to get the kWh rate
    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ message: 'User not found' });

    const kwhRate = user.kwhRate; // Assuming the user has a kWh rate

    // Use the provided createdAt date from applianceData or default to the current date if not provided
    const createdDate = createdAt ? new Date(createdAt) : new Date();

    // Calculate remaining days in the current month
    const currentYear = createdDate.getFullYear();
    const currentMonth = createdDate.getMonth(); // 0-indexed, so January is 0
    const totalDaysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
    const startDay = createdDate.getDate();
    const remainingDays = totalDaysInMonth - startDay + 1; // Days from createdAt to the end of the month

    // Calculate full weeks and remaining days
    const fullWeeks = Math.floor(remainingDays / 7);
    const extraDays = remainingDays % 7;

    // Calculate total days used based on the usage pattern
    const totalDaysUsed = (fullWeeks * usagePatternPerWeek) + Math.min(extraDays, usagePatternPerWeek);

    // Calculate total hours of usage
    const totalHoursUsed = totalDaysUsed * usagePatternPerDay;

    // Calculate energy consumption (in kWh) and monthly cost
    const energyKwh = (wattage * totalHoursUsed) / 1000; // Convert wattage to kWh
    const monthlyCost = energyKwh * kwhRate; // Calculate the total cost based on energy consumed

    // Create a new appliance entry
    const newAppliance = new Appliance({
        applianceName: applianceName.trim(),
        applianceCategory,
        wattage,
        usagePatternPerDay,
        usagePatternPerWeek,
        createdAt: createdDate, // Set the created date, allowing you to modify it for testing
        monthlyCost, // Store the calculated monthly cost
        userId
    });

    // Save the new appliance and update the user's appliance list
    await newAppliance.save();
    user.appliances.push(newAppliance._id); // Assuming user has an 'appliances' array to store appliance references
    await user.save({ validateBeforeSave: false });

    res.status(201).json({ message: 'Appliance added to user', appliance: newAppliance });
}));
router.patch('/updateAppliance/:applianceId', asyncHandler(async (req, res) => {
    const applianceId = req.params.applianceId;
    const updates = req.body;

    // Find the appliance to update
    const appliance = await Appliance.findById(applianceId);
    if (!appliance) {
        return res.status(404).json({ message: 'Appliance not found' });
    }

    // Get the user's kWh rate from the appliance's userId
    const user = await User.findById(appliance.userId);
    if (!user) {
        return res.status(404).json({ message: 'User not found' });
    }

    const kwhRate = user.kwhRate; // Use the correct property name
    if (typeof kwhRate === 'undefined') {
        return res.status(400).json({ message: 'User kWh rate is not defined' });
    }

    // Dates for cost calculation
    const updateDate = new Date(req.body.updatedAt || Date.now()); // Allow updatedAt to be set via request body
    const endOfMonth = new Date(updateDate.getFullYear(), updateDate.getMonth() + 1, 0); // Last day of the month

    // Calculate costs for the period before the update (old usage pattern)
    const oldUsagePattern = {
        usagePatternPerDay: appliance.usagePatternPerDay,
        usagePatternPerWeek: appliance.usagePatternPerWeek,
    };

    // Determine the start date for cost calculation
    const previousUpdateDate = appliance.updatedAt ? new Date(appliance.updatedAt) : new Date(appliance.createdAt);

    // If this is the first update, calculate from createdAt
    const isFirstUpdate = !appliance.updatedAt;
    const costBeforeUpdate = isFirstUpdate
        ? calculateCost(appliance.createdAt, updateDate, appliance.wattage, oldUsagePattern, kwhRate)
        : calculateCost(previousUpdateDate, updateDate, appliance.wattage, oldUsagePattern, kwhRate);

    // Calculate costs for the period after the update (new usage pattern)
    const newUsagePattern = {
        usagePatternPerDay: updates.usagePatternPerDay || appliance.usagePatternPerDay,
        usagePatternPerWeek: updates.usagePatternPerWeek || appliance.usagePatternPerWeek,
    };

    const costAfterUpdate = calculateCost(updateDate, endOfMonth, appliance.wattage, newUsagePattern, kwhRate);

    // Total monthly cost
    const totalMonthlyCost = costBeforeUpdate + costAfterUpdate;

    // Prepare the updated appliance data
    const updatedApplianceData = {
        ...updates,
        monthlyCost: totalMonthlyCost, // Update the monthly cost
        updatedAt: updateDate, // Use the date provided in the request or the current date
    };

    // Update the appliance
    const updatedAppliance = await Appliance.findByIdAndUpdate(applianceId, updatedApplianceData, { new: true });

    res.json({ message: 'Appliance updated successfully', appliance: updatedAppliance });
}));

// Function to calculate the cost based on start and end dates
function calculateCost(startDate, endDate, wattage, usagePattern, kwhRate) {
    const totalDays = Math.round((endDate - startDate) / (1000 * 60 * 60 * 24));
    const weeks = totalDays / 7;

    // Calculate total days of usage based on usage pattern
    const totalDaysOfUsage = Math.floor(weeks * usagePattern.usagePatternPerWeek);

    // Energy consumed in kWh
    const energyConsumed = (wattage * usagePattern.usagePatternPerDay * totalDaysOfUsage) / 1000;

    // Total cost
    return energyConsumed * kwhRate; // Total cost in currency
}
